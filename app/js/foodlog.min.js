/*!
 * app
 * @author David Wilhelm
 * @version 0.0.1
 */
var fl = fl || {};

(function () {
  'use strict';

  fl.Day = Backbone.RelationalModel.extend({
    // url: 'js/sample-data.json',

    idAttribute: 'entry_id',

    relations: [{
      type: Backbone.HasMany,

      key: 'entries',
      
      relatedModel: 'fl.FoodItem',
      
      reverseRelation: {
        key: 'day',
        includeInJSON: 'entry_id'
      }
    }]

  });


})();
var fl = fl || {};

(function () {
  'use strict';

  // Food Item Model
  // Represents one entry in a possible list on entries on one day.

  fl.FoodItem = Backbone.RelationalModel.extend({

  });

  // TEMP METHOD - supress attempts to sync with a server.
  // Backbone.sync = function (method, model, options) {
  //   if (method === 'read') {
  //     console.log(options);
  //   }
  // };  
})();
var fl = fl || {};

(function () {
  'use strict';

  // Week Collection
  // A collection of Day Models
  var Week = Backbone.Collection.extend({
    model: fl.Day,

    url: 'js/sample-data.json',

    parse: function (resp) {
      // Set values based on current date.
      var curDay = fl.date.getDay();
      var curDate = fl.date.getDate();
      var d, i, j, len;
      
      // Store dates.
      var dates = [];
      
      // Store data we send to client.
      var response = [];

      // Get dats for all days of week after and including current day.
      // Don't include 7 because getDay is zero-based.
      for (i = curDay; i < 6; i += 1) {
        
        // Create date object.
        d = new Date();
        d = d.setDate(curDate);

        // Convert to string.
        d = new Date(d).toISOString().split('T')[0];

        // Add to arrray.
        dates.push(d);
        
        // increment curDate for next run of loop.
        curDate += 1;
      }

      // Reset some variables.
      i = curDay + 1;
      curDate = fl.date.getDate();

      // Do the same for days of the week that come before current day.
      while (i--) {
        curDate -= 1;
        d = new Date();
        d = d.setDate(curDate);
        d = new Date(d).toISOString().split('T')[0];
        dates.push(d);
        
      }

      // Sort the dates.
      dates.sort(function (a, b) {
        if (a === b) {
          return 0;
        }

        return a < b ? -1 : 1;
      });

      for (i = 0; i < 7; i += 1) {
        for (j = 0, len = resp.length; j < len; j += 1) {
          if (dates[i] === resp[j].date) {
            response.push(resp[j]);
          }
        }
      }

      return response;
    }

  });

  // Create global collection of food items.
  fl.week = new Week();
})();
(function () {
  'use strict';


  // View for one day and its associated information.
  // For binding interactions to food items associated with this day, see foodItem-view.js

  fl.DayView = Backbone.View.extend({

    template: _.template( $('#day-template').html() ),

    initialize: function () {
      // Maintain reference to this in render functions.
      _.bindAll(this, 'render', 'renderEntry');
      // Watch for new entries and immediately add them to the page.
      this.model.bind('add:entries', this.renderEntry);
    },

    events : {
      'click h2': 'toggleContents',
      'keypress input.add-new': 'createOnEnter'
    },

    toggleContents: function () {
      // Hide or show content.
      this.$('.inner-wrap').slideToggle();
      // Set appropriate classes.
      this.$el.toggleClass('current');
      this.$icon.toggleClass('icon-plus icon-minus icon-white');
    },

    createOnEnter: function (e) {
      var string = this.$input.val().trim();

      // Listen for enter key to be pressed.
      if (e.which === ENTER_KEY && string) {
        // If enter key is pressed we add a new item to our collection.
        this.$input.val('');
        return this.model.get('entries').create({ title: string });
      }

      return;
    },

    renderEntry: function (entry) {
      var entryView = new fl.FoodItemView({ model: entry });
      this.$('ul.entries').append(entryView.render());
    },

    setDateString: function () {
      var d = new Date(this.model.get('date'));
      var b = d.getDate() + 1;
      d.setDate(b);
      b = new Date(d).toDateString();
      this.model.set('dateString', b);
    },

    className: function () {
      this.setDateString();
      var string = 'day';

      if (fl.date.toDateString() === this.model.get('dateString')) {
        string += ' current';
      }

      return string;
    },

    setIcons: function () {
      if (this.$el.hasClass('current')) {
        this.$icon.addClass('icon-minus icon-white');
      } else {
        this.$icon.addClass('icon-plus');
      }
    },

    render: function () {
      this.$el.html( this.template( this.model.toJSON() ) );
      this.$input = this.$('input.add-new');
      this.$icon = this.$('h2').find('i');      
      this.setIcons();
      this.model.get('entries').forEach(this.renderEntry);

      if (this.$el.hasClass('current')) {
        this.$('.inner-wrap').css('display', 'block');
      }

      $('#week').append(this.el);
    }
  });

})();
(function () {
  'use strict';

  fl.FoodItemView = Backbone.View.extend({

    tagName: 'li',

    id: function () {
      return this.model.cid;
    },

    template: _.template( $('#foodItem-template').html() ),

    initialize: function () {
      _.bindAll(this, 'render');
      this.listenTo(this.model, 'change', this.render);
      this.listenTo(this.model, 'destroy', this.remove);
    },

    events: {
      'dblclick label': 'edit',
      'keypress .edit': 'detectEnter',
      'blur .edit':   'exitEdit',
      'click button.destroy': 'deleteItem'
    },    

    render: function () {
      var html = this.$el.html(this.template(this.model.toJSON()));
      this.$input = this.$('.edit');
      return html;
    },

    edit: function () {
      // Set item to edit mode.
      this.$el.addClass('editing');
      this.$input.focus();
    },

    detectEnter: function (e) {
      // Update item when enter is pressed.
      if (e.which === ENTER_KEY) {
        this.exitEdit();
      }
    },

    exitEdit: function () {
      // Update item and exit editor when the input loses focus or enter key is pressed.
      var newVal = this.$input.val();
      var origVal = this.model.get('title').trim();
      console.log(newVal);
      // Set the input value to the new value.
      this.$input.val(origVal);


      // If a new value was set and its not the same as the old value update the model.
      if (newVal && newVal !== origVal) {
        console.log('change');
        this.model.set({ title: newVal });
      }

      this.$el.removeClass('editing');
    },

    deleteItem: function () {
      this.model.destroy();
    }
  });

})();
(function ($) {
  'use strict';

  // Top-level view for our app.

  fl.foodLogView = Backbone.View.extend({

    initialize: function () {
      // Bind events.
      fl.date = new Date();
      this.listenTo(fl.week, 'reset', this.addAll);

      // Retrieve stored data.
      fl.week.fetch({reset: true});
    },

    addOne: function (day) {
      // Add one item to the day list.
      var view = new fl.DayView({
        model: day 
      });
      view.render();  
    },

    addAll: function (day) {
      // Create an html list from a whole collection.
      fl.week.each(this.addOne, this);
    }

  });
  
})(jQuery);

var fl = fl || {};
var ENTER_KEY = 13;

$(function () {
  'use strict';

  // Start the app.
  new fl.foodLogView();

});